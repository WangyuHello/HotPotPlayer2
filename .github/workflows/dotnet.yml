# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: HotPotPlayer2 app

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      github_release:
        description: 'Upload to Github release'
        required: false
        default: true
        type: boolean

jobs:
  win32:
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      Solution_Name: HotPotPlayer2
      Configuration: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'true'

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Install Tools
      run: |
        dotnet tool install -g KuiperZone.PupNet

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2
      with:
        vs-prerelease: true
        msbuild-architecture: x64

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration

    - name: Create the app package
      run: pupnet HotPotPlayer2.pupnet.win.conf --kind setup --app-version 0.${{ github.run_number }}.${{ github.run_attempt }}[1] -y

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: win32
        path: |
          Package/bin/*

  linux:
    runs-on: ubuntu-latest
    env:
      Solution_Name: HotPotPlayer2
      Configuration: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'true'

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Install Tools
      run: |
        dotnet tool install -g KuiperZone.PupNet

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2
      with:
        vs-prerelease: true
        msbuild-architecture: x64

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration

    - name: Create the app package deb
      run: pupnet HotPotPlayer2.pupnet.conf --kind deb --app-version 0.${{ github.run_number }}.${{ github.run_attempt }}[1] -y

    - name: Create the app package rpm
      run: pupnet HotPotPlayer2.pupnet.conf --kind rpm --app-version 0.${{ github.run_number }}.${{ github.run_attempt }}[1] -y

    - name: Create the app package flatpak
      run: pupnet HotPotPlayer2.pupnet.conf --kind flatpak --app-version 0.${{ github.run_number }}.${{ github.run_attempt }}[1] -y

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux
        path: |
          Package/bin/*

  release:
    runs-on: ubuntu-latest
    needs: [win32, linux]
    if: ${{ github.event.inputs.github_release == 'true' }}

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        path: artis

    - name: Create GH release
      uses: softprops/action-gh-release@v2
      with:
        name: '0.${{ github.run_number }}.${{ github.run_attempt }}.0'
        tag_name: 'v0.${{ github.run_number }}.${{ github.run_attempt }}.0'
        body:
        files: |
          artis/*
        fail_on_unmatched_files: true
